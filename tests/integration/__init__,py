import asyncio
from aiohttp import web
import aiohttp
import time
import json

# === Dummy upstream server ===

async def echo_handler(request):
    data = await request.read()
    print(f"Upstream received {request.method} request at {request.path}")
    print(f"Upstream headers: {dict(request.headers)}")
    print(f"Upstream body: {data.decode('utf-8', errors='ignore')}")

    response = {
        "method": request.method,
        "headers": dict(request.headers),
        "body": data.decode("utf-8", errors="ignore"),
    }
    return web.json_response(response)

async def start_upstream_server():
    app = web.Application()
    app.router.add_route("*", "/{tail:.*}", echo_handler)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "127.0.0.1", 9999)
    await site.start()
    return runner

# === Integration test with debug prints ===

async def test_reverse_proxy():
    from protocol import serve

    print("Starting reverse proxy server...")
    asyncio.create_task(serve())
    await asyncio.sleep(0.5)  # Wait a moment for the proxy to start

    # Start upstream
    print("Starting upstream server on port 9999...")
    upstream_runner = await start_upstream_server()

    methods = ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS", "HEAD"]
    async with aiohttp.ClientSession() as session:
        for method in methods:
            print(f"\nPreparing to send {method} request to reverse proxy...")
            url = "http://127.0.0.1:8080/test"
            headers = {"X-Test-Header": method}
            data = "payload" if method in {"POST", "PUT", "PATCH"} else None

            print(f"Sending request to URL: {url}")
            print(f"Request headers: {headers}")
            if data:
                print(f"Request body: {data}")

            start = time.perf_counter()
            try:
                async with session.request(method, url, headers=headers, data=data) as resp:
                    latency = (time.perf_counter() - start) * 1000
                    print(f"Response received with status {resp.status}")
                    print(f"Latency: {latency:.2f}ms")

                    body = await resp.text()
                    print(f"Response body: {body}")

                    # Debug: Print headers and body
                    print(f"Response headers: {dict(resp.headers)}")

                    if method != "HEAD":
                        result = json.loads(body)
                        assert result["method"] == method, f"Method mismatch: expected {method}, got {result['method']}"
                        assert result["headers"].get("X-Test-Header") == method, f"Header mismatch: expected {method}, got {result['headers'].get('X-Test-Header')}"
                        if data:
                            assert result["body"] == data, f"Body mismatch: expected {data}, got {result['body']}"
            except Exception as e:
                print(f"Error during {method} request: {e}")

    await upstream_runner.cleanup()

# === Run directly ===

if __name__ == "__main__":
    asyncio.run(test_reverse_proxy())
